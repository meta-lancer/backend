name: Build with Gradle
run-name: Go Go
on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-2
  AWS_S3_BUCKET: metaovis-service
  AWS_CODE_DEPLOY_APPLICATION: Backend-CICD
  AWS_CODE_DEPLOY_GROUP: Backend-CICD-Group
  RESOURCE_PATH: ./src/main/resources/application.yml

jobs:
  build-with-gradle:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      #      - name: Set yml file
      #        uses: microsoft/variable-substitution@v1
      #        with:
      #          files: ${{ env.RESOURCE_PATH }}


      - name: Where is here
        run: pwd

      - name: Executable Gradle
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build --stacktrace
        env:
          spring.redis.host: ${{secrets.REDIS_HOST}}
          spring.redis.port: ${{secrets.REDIS_PORT}}
          spring.security.oauth2.client.targetUrl: ${{secrets.OAUTH_CLIENT_TARGET_URL}}
          spring.loginPage: ${{secrets.OAUTH_LOGIN_PAGE}}
          spring.successUrl: ${{secrets.OAUTH_SUCCESS_URL}}
          spring.failUrl: ${{secrets.OAUTH_FAIL_URL}}
          spring.security.rememberMe.key: ${{secrets.REMEMBERME_KEY}}
          exchange.api.key: ${{secrets.EXCHANGE_API_KEY}}
          cloud.aws.credentials.accessKey: ${{secrets.AWS_ACCESS_KEY}}
          cloud.aws.credentials.secretKey: ${{secrets.AWS_SECRET_KEY}}
          cloud.aws.s3.assetBucket: ${{secrets.ASSET_BUCKET}}
          cloud.aws.region.static: ${{secrets.REGION_STATIC}}
          cloud.aws.s3.cloudfront.asset: ${{secrets.CLOUDFRONT_ASSET}}
          cloud.aws.s3.cloudfront.user: ${{secrets.CLOUDFRONT_USER}}
          cloud.aws.s3.cloudfront.service: ${{secrets.CLOUDFRONT_SERVICE}}
          slack.private.token: ${{secrets.SLACK_TOKEN}}
          slack.channel.error: ${{secrets.SLACK_ERROR_CHANNEL}}
          slack.channel.info: ${{secrets.SLACK_INFO_CHANNEL}}
          iamport.api.key: ${{secrets.IMP_KEY}}
          iamport.api.secret: ${{secrets.IMP_SECRET}}
          iamport.imp_uid: ${{secrets.IMP_UID}}
          spring.datasource.driver-class-name: ${{ secrets.RDS_DRIVER }}
          spring.datasource.url: ${{ secrets.RDS_HOST }}
          spring.datasource.username: ${{ secrets.RDS_USERNAME }}
          spring.datasource.password: ${{ secrets.RDS_PASSWORD }}

      - name: AWS credential 설정
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ secrets.CICD_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.CICD_SECRET_KEY }}

      - name: S3에 업로드
        run: aws deploy push --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --ignore-hidden-files --s3-location s3://$AWS_S3_BUCKET/cicdtest/$GITHUB_SHA.zip --source .
      - name: EC2에 배포
        run: aws deploy create-deployment --application-name ${{ env.AWS_CODE_DEPLOY_APPLICATION }} --deployment-config-name CodeDeployDefault.AllAtOnce --deployment-group-name ${{ env.AWS_CODE_DEPLOY_GROUP }} --s3-location bucket=$AWS_S3_BUCKET,key=cicdtest/$GITHUB_SHA.zip,bundleType=zip